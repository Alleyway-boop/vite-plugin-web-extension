import{o as t,c as l,a as e,b as s,t as o,d as a}from"./app.8e35e134.js";const i=a(`<h1 id="plugin-options" tabindex="-1">Plugin Options <a class="header-anchor" href="#plugin-options" aria-hidden="true">#</a></h1><p>These options are available when adding the plugin in your <code>vite.config.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> webExtension </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite-plugin-web-extension</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">webExtension</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// place options here</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="additionalinputs" tabindex="-1"><code>additionalInputs</code> <a class="header-anchor" href="#additionalinputs" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">additionalInputs</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> string[]</span></span>
<span class="line"></span></code></pre></div><p>A list of paths relative to Vite&#39;s root directory that should be built along with the inputs listed in your manifest.</p><p>Usually, this is additional HTML files that aren&#39;t listed in your manifest, but still want to show, like an onboarding page. It also accepts stylesheets (CSS, SCSS, Stylus, etc) and scripts (JS or TS), essentially everything that Vite knows how to build.</p><p>Depending on the type of file listed, it will be built at different times:</p><ul><li>HTML files are built in the same step along side the other HTML files listed in the manifest.</li><li>JS files are bundled individually in the order listed.</li><li>CSS files are also bundled individually in the order listed.</li></ul><h2 id="browser" tabindex="-1"><code>browser</code> <a class="header-anchor" href="#browser" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">browser</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span></code></pre></div>`,11),p=e("code",null,"<outDir>/manifest.json",-1),r=a(`<p>See <a href="/guide/supporting-multiple-browsers.html">Supporting Multiple Browsers</a> to learn more about how to use the <code>browser</code> option in combination with manifest templates.</p><h2 id="disableautolaunch" tabindex="-1"><code>disableAutoLaunch</code> <a class="header-anchor" href="#disableautolaunch" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">disableAutoLaunch</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Setting to <code>true</code> will prevent the browser from opening when starting the dev server or running the extension in watch mode.</p><p>This can be useful in setups where opening the browser is impossible, like in the WSL/WSL2. In this case, the linux shell can&#39;t communicate with the Window&#39;s browser, and it crashes. Setting <code>disableAutoLaunch: true</code> will trigger rebuild&#39;s when you save a file, and you can open an install the extension manually.</p><h2 id="htmlviteconfig" tabindex="-1"><code>htmlViteConfig</code> <a class="header-anchor" href="#htmlviteconfig" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">htmlViteConfig</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InlineConfig</span></span>
<span class="line"></span></code></pre></div><p>You can provide additional Vite config to the HTML multipage build step by setting it here.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Use with caution, I have not tested the compatibility of every single Vite build option with the HTML build process. Submit an issue if you have any problems.</p></div><h2 id="manifest" tabindex="-1"><code>manifest</code> <a class="header-anchor" href="#manifest" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">manifest</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> any) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The manifest can either be:</p><ul><li>The path relative to Vite&#39;s root directory to a file containing a manifest template</li><li>A function that returns the manifest template as a JSON object.</li></ul><p>When not provided, it defaults to <code>&quot;manifest.json&quot;</code>, and the plugin looks for a template at <code>&lt;viteRoot&gt;/manifest.json</code>.</p><p>See <a href="/guide/supporting-multiple-browsers.html">Supporting Multiple Browsers</a> to learn more about how to use manifest templates.</p><h2 id="printsummary" tabindex="-1"><code>printSummary</code> <a class="header-anchor" href="#printsummary" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">printSummary</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"></span></code></pre></div><p>Defaults to <code>true</code>. When <code>true</code>, the plugin will print a summary of what files are being built in what order.</p><h2 id="scriptviteconfig" tabindex="-1"><code>scriptViteConfig</code> <a class="header-anchor" href="#scriptviteconfig" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">scriptViteConfig</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InlineConfig</span></span>
<span class="line"></span></code></pre></div><p>You can provide additional Vite config to the individually bundled JS files by setting it here.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Use with caution, I have not tested the compatibility of every single Vite build option with the HTML build process. Submit an issue if you have any problems.</p></div><h2 id="skipmanifestvalidation" tabindex="-1"><code>skipManifestValidation</code> <a class="header-anchor" href="#skipmanifestvalidation" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">skipManifestValidation</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"></span></code></pre></div><p>By default, the <code>&lt;outDir&gt;/manifest.json</code> will be validated against Google&#39;s JSON schema: <a href="https://json.schemastore.org/chrome-manifest" target="_blank" rel="noreferrer">https://json.schemastore.org/chrome-manifest</a>.</p><p>Setting this to <code>true</code> will skip validation.</p><blockquote><p>The validation process downloads the schema from the above URL. If you are working offline, this step will be skipped automatically.</p></blockquote><h2 id="watchfilepaths" tabindex="-1"><code>watchFilePaths</code> <a class="header-anchor" href="#watchfilepaths" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">watchFilePaths</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> string[]</span></span>
<span class="line"></span></code></pre></div><p>A list of paths relative to Vite&#39;s root directory that cause a full rebuild of the extension during development. When one of these files is saved, the browser will be shut down, manifest regenerated, and the browser will open again.</p><p>If the <code>manifest</code> field was a string, it will be added to this list automatically. If the <code>manifest</code> field is a function, you should add any files that are used to generate the manifest (like <code>package.json</code>).</p><h2 id="webextconfig" tabindex="-1"><code>webExtConfig</code> <a class="header-anchor" href="#webextconfig" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">webExtConfig</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span></code></pre></div><p>Configure the startup behavior of the browser.</p><p>See <a href="https://github.com/mozilla/web-ext/blob/666886f40a967b515d43cf38fc9aec67ad744d89/src/program.js#L559" target="_blank" rel="noreferrer"><code>web-ext</code>&#39;s source code</a> for possible options.</p><p>See <a href="/guide/configure-browser-startup.html">Configure Browser Startup</a> for alteratives and more details on how this field is used.</p>`,36),g=JSON.parse('{"title":"Plugin Options","description":"","frontmatter":{"lang":"en-US","title":"Plugin Options"},"headers":[{"level":2,"title":"additionalInputs","slug":"additionalinputs","link":"#additionalinputs","children":[]},{"level":2,"title":"browser","slug":"browser","link":"#browser","children":[]},{"level":2,"title":"disableAutoLaunch","slug":"disableautolaunch","link":"#disableautolaunch","children":[]},{"level":2,"title":"htmlViteConfig","slug":"htmlviteconfig","link":"#htmlviteconfig","children":[]},{"level":2,"title":"manifest","slug":"manifest","link":"#manifest","children":[]},{"level":2,"title":"printSummary","slug":"printsummary","link":"#printsummary","children":[]},{"level":2,"title":"scriptViteConfig","slug":"scriptviteconfig","link":"#scriptviteconfig","children":[]},{"level":2,"title":"skipManifestValidation","slug":"skipmanifestvalidation","link":"#skipmanifestvalidation","children":[]},{"level":2,"title":"watchFilePaths","slug":"watchfilepaths","link":"#watchfilepaths","children":[]},{"level":2,"title":"webExtConfig","slug":"webextconfig","link":"#webextconfig","children":[]}],"relativePath":"config/plugin-options.md"}'),c={name:"config/plugin-options.md"},D=Object.assign(c,{setup(d){const n="{{browser}}";return(h,u)=>(t(),l("div",null,[i,e("p",null,[s("When using "),e("code",null,o(n)+"."),s(" prefixes in your manifest template, setting this field will cause only the matching tags to be in the "),p,s(".")]),r]))}});export{g as __pageData,D as default};
